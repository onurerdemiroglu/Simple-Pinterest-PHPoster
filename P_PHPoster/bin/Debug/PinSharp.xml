<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PinSharp</name>
    </assembly>
    <members>
        <member name="M:PinSharp.Api.IMeApi.GetUserAsync">
            <summary>
            Returns information about the user linked with the used access token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PinSharp.Api.IPinsApi.CreatePinAsync(System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="board">The board ID or slug (user/board-name)</param>
             <param name="imageUrl"></param>
             <param name="note"></param>
             <param name="link"></param>
             <returns></returns>
        </member>
        <member name="M:PinSharp.Api.IPinsApi.CreatePinFromBase64Async(System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="board">The board ID or slug (user/board-name)</param>
             <param name="imageBase64"></param>
             <param name="note"></param>
             <param name="link"></param>
             <returns></returns>
        </member>
        <member name="M:PinSharp.Api.IPinsApi.UpdatePinAsync(System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <param name="board">The new board ID or slug (user/board-name)</param>
             <param name="note"></param>
             <param name="link"></param>
             <returns></returns>
        </member>
        <member name="T:PinSharp.Api.Scopes">
            <summary>
            The different permission scopes you can request access when requesting an access token.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.None">
            <summary>
            Use GET method on a user’s profile, board and pin details, and the pins on a board.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.ReadPublic">
            <summary>
            Use GET method on a user’s pins, boards and likes.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.WritePublic">
            <summary>
            Use PATCH, POST and DELETE methods on a user’s pins and boards.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.ReadRelationships">
            <summary>
            Use GET method on a user’s follows and followers (on boards, users and interests).
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.WriteRelationships">
            <summary>
            Use PATCH, POST and DELETE methods on a user’s follows and followers (on boards, users and interests).
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.ReadAll">
            <summary>
            Combination of <see cref="F:PinSharp.Api.Scopes.ReadPublic"/> and <see cref="F:PinSharp.Api.Scopes.ReadRelationships"/>.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.WriteAll">
            <summary>
            Combination of <see cref="F:PinSharp.Api.Scopes.WritePublic"/> and <see cref="F:PinSharp.Api.Scopes.WriteRelationships"/>.
            </summary>
        </member>
        <member name="F:PinSharp.Api.Scopes.All">
            <summary>
            Combination of all scopes - <see cref="F:PinSharp.Api.Scopes.ReadPublic"/>, <see cref="F:PinSharp.Api.Scopes.ReadRelationships"/>, <see cref="F:PinSharp.Api.Scopes.WritePublic"/> and <see cref="F:PinSharp.Api.Scopes.WriteRelationships"/>.
            </summary>
        </member>
        <member name="T:PinSharp.PinSharpAuthClient">
            <summary>
            Static class used for getting an authorization URL and to get an access token from the code returned from Pinterest.
            </summary>
        </member>
        <member name="M:PinSharp.PinSharpAuthClient.BuildAuthorizationUrl(System.String,System.String,PinSharp.Api.Scopes)">
            <summary>
            <para>
                Generates a login URL with the required parameters.
                Users will need to visit this URL to authorize your app to use the API on their behalf.
            </para>
            <para>
                If they accept they will be redirected to the <paramref name="redirectUri"/>
                with two query string parameters - "state" and "code".
            </para>
            <para>
                Call <see cref="M:PinSharp.PinSharpAuthClient.BuildAuthorizationUrl(System.String,System.String,PinSharp.Api.Scopes,System.String)"/> if you want to specify the state value yourself to be able to prevent spoofing.
            </para>
            <para>
                "code" is used with <see cref="M:PinSharp.PinSharpAuthClient.GetAccessTokenAsync(System.String,System.String,System.String,System.String)"/> to
                get an access token to use with <see cref="T:PinSharp.PinSharpClient"/>.
            </para>
            </summary>
            <param name="clientId">The Client ID (also known as App ID) of your app. See https://developers.pinterest.com/apps/</param>
            <param name="redirectUri">
                The URL you want your user to be redirected to after authorizing your app.
                The code needed for <see cref="M:PinSharp.PinSharpAuthClient.GetAccessTokenAsync(System.String,System.String,System.String,System.String)"/> will be added as query string parameter "code".
            </param>
            <param name="scopes">The scopes you want to request from the user.</param>
            <returns></returns>
        </member>
        <member name="M:PinSharp.PinSharpAuthClient.BuildAuthorizationUrl(System.String,System.String,PinSharp.Api.Scopes,System.String)">
            <summary>
            <para>
                Generates a login URL with the required parameters.
                Users will need to visit this URL to authorize your app to use the API on their behalf.
            </para>
            <para>
                If they accept they will be redirected to the <paramref name="redirectUri"/>
                with two query string parameters - "state" and "code".
            </para>
            <para>
                "state" verifies that this comes from you.
                "code" is used with <see cref="M:PinSharp.PinSharpAuthClient.GetAccessTokenAsync(System.String,System.String,System.String,System.String)"/> to
                get an access token to use with <see cref="T:PinSharp.PinSharpClient"/>.
            </para>
            </summary>
            <param name="clientId">The Client ID (also known as App ID) of your app. See https://developers.pinterest.com/apps/</param>
            <param name="redirectUri">
                The URL you want your user to be redirected to after authorizing your app.
                The code needed for <see cref="M:PinSharp.PinSharpAuthClient.GetAccessTokenAsync(System.String,System.String,System.String,System.String)"/> will be added as query string parameter "code".
            </param>
            <param name="scopes">The scopes you want to request from the user.</param>
            <param name="state">A string that is added to <paramref name="redirectUri"/> as query string parameter "state". This is to prevent spoofing.</param>
            <returns></returns>
        </member>
        <member name="M:PinSharp.PinSharpAuthClient.GetAccessTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Gets an access token which you can then use with <see cref="T:PinSharp.PinSharpClient"/>.
            </summary>
            <param name="clientId">The Client ID (also known as App ID) of your app. See https://developers.pinterest.com/apps/</param>
            <param name="clientSecret">The Client secret (also known as App secret) of your app. See https://developers.pinterest.com/apps/</param>
            <param name="code">The code that was passed to your <c>redirectUri</c> as a query string parameter.</param>
            <param name="apiVersion">The API version. Defaults to "v1" if left out.</param>
            <returns>An access token for use with <see cref="T:PinSharp.PinSharpClient"/>.</returns>
        </member>
        <member name="M:PinSharp.PinSharpAuthClient.CreateRandomState(System.Int32)">
             <summary>
             Generates a random string that you can use to verify that
             the redirect back to your site or app wasn't spoofed.
            
             <para>
                 Pass this to <see cref="M:PinSharp.PinSharpAuthClient.BuildAuthorizationUrl(System.String,System.String,PinSharp.Api.Scopes)"/> to get the correct login URL.
             </para>
             </summary>
             <param name="length">The length of the random string.</param>
             <returns></returns>
        </member>
        <member name="P:PinSharp.PinSharpClient.Boards">
            <summary>
             Endpoints for getting board information, pins on boards and managing boards.
            </summary>
        </member>
        <member name="P:PinSharp.PinSharpClient.Me">
            <summary>
            Endspoints related to the user associated with the used access token.
            </summary>
        </member>
        <member name="P:PinSharp.PinSharpClient.Pins">
            <summary>
            Endspoints for creating, updating and deleting pins.
            </summary>
        </member>
        <member name="P:PinSharp.PinSharpClient.Users">
            <summary>
            Endpoints for getting user information.
            </summary>
        </member>
        <member name="P:PinSharp.PinSharpClient.RateLimits">
            <summary>
            Contains information about your request limit and remaining requests.
            Rate limits uses a 60-minute sliding window.
            This is updated after each request and will be null until the first requests has been made.
            </summary>
        </member>
    </members>
</doc>
